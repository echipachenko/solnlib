import sys
import os.path as op
import unittest

sys.path.insert(0, op.dirname(op.dirname(op.abspath(__file__))))
import splunksolutionlib.common.codecs as codecs


class TestGzipHandler(unittest.TestCase):

    def test_check_format(self):
        normal_data = 'test'
        self.assertFalse(codecs.GzipHandler.check_format(normal_data))

        gzcomp_data = \
            '\x1f\x8b\x08\x08\xc7I\xd5V\x02\xfftest\x00+I-.\x01\x00\x0c~\x7f\xd8\x04\x00\x00\x00'
        self.assertTrue(codecs.GzipHandler.check_format(gzcomp_data))

    def test_decompress(self):
        normal_data = 'test'
        gzcomp_data = \
            '\x1f\x8b\x08\x08\xc7I\xd5V\x02\xfftest\x00+I-.\x01\x00\x0c~\x7f\xd8\x04\x00\x00\x00'

        with self.assertRaises(ValueError):
            codecs.GzipHandler.decompress(normal_data)

        self.assertEqual(normal_data,
                         codecs.GzipHandler.decompress(gzcomp_data))


class TestZiphandler(unittest.TestCase):

    def test_check_format(self):
        normal_data = "test"
        self.assertFalse(codecs.ZipHandler.check_format(normal_data))

    def test_decompress(self):
        normal_data = 'test'
        zcomp_data_2files = \
            'PK\x03\x04\x14\x00\x00\x00\x00\x00d\x84aHS\xfcQg\x02\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00test1.txt1\nPK\x03\x04\x14\x00\x00\x00\x00\x00g\x84aH\x90\xaf|L\x02\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00test2.txt2\nPK\x01\x02\x14\x03\x14\x00\x00\x00\x00\x00d\x84aHS\xfcQg\x02\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00test1.txtPK\x01\x02\x14\x03\x14\x00\x00\x00\x00\x00g\x84aH\x90\xaf|L\x02\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81)\x00\x00\x00test2.txtPK\x05\x06\x00\x00\x00\x00\x02\x00\x02\x00n\x00\x00\x00R\x00\x00\x00\x00\x00'
        zcomp_bad_data = \
            'PK\x03\x04\x14\x00\x00\x00\x00\x00\x03\x89aH\xc65\xb9;\x05\x00\x00\x00\x05\x00\x00\x00\t\x00\x00\x00test1.txttestPK\x01\x02\x14\x03\x14\x00\x00\x00\x00\x00\x03\x89aH\xc65\xb9;\x05\x00\x00\x00\x05\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00test1.txtPK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x007\x00\x00\x00,\x00\x00\x00\x00\x00'
        zcomp_data = \
            'PK\x03\x04\x14\x00\x00\x00\x00\x00\x03\x89aH\xc65\xb9;\x05\x00\x00\x00\x05\x00\x00\x00\t\x00\x00\x00test1.txttest\nPK\x01\x02\x14\x03\x14\x00\x00\x00\x00\x00\x03\x89aH\xc65\xb9;\x05\x00\x00\x00\x05\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00test1.txtPK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x007\x00\x00\x00,\x00\x00\x00\x00\x00'

        with self.assertRaises(ValueError):
            codecs.ZipHandler.decompress(normal_data)

        with self.assertRaises(ValueError):
            codecs.ZipHandler.decompress(zcomp_data_2files)

        with self.assertRaises(ValueError):
            codecs.ZipHandler.decompress(zcomp_bad_data)

        self.assertEqual(codecs.ZipHandler.decompress(zcomp_data), 'test\n')

if __name__ == '__main__':
    unittest.main(verbosity=2)
